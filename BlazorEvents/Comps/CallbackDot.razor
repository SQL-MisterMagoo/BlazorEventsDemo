@*
    Renders a circular component whose ValueChanged event is EventCallback-based
    Can optionally display its own Render stats
    When clicked it increments its bound Value and raises ValueChanged
    It uses an Injected AppState to respond to requests to perform a dummy workload
    and/or whether it should display Stats
*@
@inherits CallbackValue<int>
@implements IDisposable

<div class="dot dot@(clickCount % 2)" @onclick="@Clicked" style="--bgval:@Value;">
    <span class="badge badge-dark">EventCallback</span>
    @if (displayStats)
    {
        <span class="badge badge-info">Should Render : @shouldRender</span>
        <span class="badge badge-danger">Did Render : @actualRender</span>
        <span class="badge badge-primary">Clicked : @clickCount</span>
    }
</div>

@code {

    [Inject] AppState appState { get; set; }

    bool displayStats;
    bool workLoad;
    int shouldRender;
    int actualRender;
    int clickCount;
    Random rng = new Random();

    protected Task Clicked(MouseEventArgs args)
    {
        clickCount++;
        Value = Value + 1;
        return Task.CompletedTask;
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        appState.GotNewState += AppStateChanged;
    }
    void AppStateChanged(object sender, AppStateNames name)
    {
        switch (name)
        {
            case AppStateNames.WorkLoad:
                workLoad = (bool)appState.GetValue(AppStateNames.WorkLoad);
                break;
            case AppStateNames.DisplayStats:
                displayStats = (bool)appState.GetValue(AppStateNames.DisplayStats);
                InvokeAsync(StateHasChanged);
                break;
            default:
                break;
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        actualRender++;
    }
    protected override bool ShouldRender()
    {
        shouldRender++;
        return base.ShouldRender();
    }
    protected override async Task OnParametersSetAsync()
    {
        if (workLoad)
        {
            await Task.Delay(rng.Next(1000));
        }

        await base.OnParametersSetAsync();
    }
    public void Dispose()
    {
        appState.GotNewState -= AppStateChanged;

    }
}
